{"version":3,"sources":["Backdrop.tsx"],"names":["BackdropComponent","state","theme","disableBlur","windowHeight","AnimatedBlurView","value","IS_IOS","Animated","createAnimatedComponent","BlurView","View","tapGestureEvent","onStart","event","context","startPosition","x","y","onCancel","CONTEXT_MENU_STATE","END","onEnd","distance","Math","hypot","shouldClose","isStateActive","ACTIVE","animatedContainerStyle","topValueAnimation","HOLD_ITEM_TRANSFORM_DURATION","duration","opacityValueAnimation","top","opacity","animatedContainerProps","intensity","animatedInnerContainerStyle","backgroundColor","BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR","BACKDROP_LIGHT_BACKGROUND_COLOR","BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR","BACKDROP_DARK_BACKGROUND_COLOR","styles","container","StyleSheet","absoluteFillObject","Backdrop"],"mappings":"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","sourcesContent":["import React, { memo, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedGestureHandler,\n  useAnimatedProps,\n  useAnimatedStyle,\n  withDelay,\n  withTiming,\n} from 'react-native-reanimated';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\n\n// Components\nimport { BlurView } from 'expo-blur';\n\n// Utils\nimport { styles } from './styles';\nimport {\n  CONTEXT_MENU_STATE,\n  HOLD_ITEM_TRANSFORM_DURATION,\n  IS_IOS,\n} from '../../constants';\nimport {\n  BACKDROP_LIGHT_BACKGROUND_COLOR,\n  BACKDROP_DARK_BACKGROUND_COLOR,\n  BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR,\n  BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR,\n} from './constants';\nimport { useDeviceOrientation, useInternal } from '../../hooks';\n\ntype Context = {\n  startPosition: {\n    x: number;\n    y: number;\n  };\n};\n\nconst BackdropComponent = () => {\n  const { state, theme, disableBlur } = useInternal();\n  const { windowHeight } = useDeviceOrientation();\n\n  const AnimatedBlurView = useMemo(\n    () =>\n      disableBlur?.value === false && IS_IOS\n        ? Animated.createAnimatedComponent(BlurView)\n        : Animated.View,\n    [disableBlur]\n  );\n\n  const tapGestureEvent = useAnimatedGestureHandler<\n    TapGestureHandlerGestureEvent,\n    Context\n  >(\n    {\n      onStart: (event, context) => {\n        context.startPosition = { x: event.x, y: event.y };\n      },\n      onCancel: () => {\n        state.value = CONTEXT_MENU_STATE.END;\n      },\n      onEnd: (event, context) => {\n        const distance = Math.hypot(\n          event.x - context.startPosition.x,\n          event.y - context.startPosition.y\n        );\n        const shouldClose = distance < 10;\n        const isStateActive = state.value === CONTEXT_MENU_STATE.ACTIVE;\n        if (shouldClose && isStateActive) {\n          state.value = CONTEXT_MENU_STATE.END;\n        }\n      },\n    },\n    [state]\n  );\n\n  const animatedContainerStyle = useAnimatedStyle(() => {\n    const topValueAnimation = () =>\n      state.value === CONTEXT_MENU_STATE.ACTIVE\n        ? 0\n        : withDelay(\n            HOLD_ITEM_TRANSFORM_DURATION,\n            withTiming(windowHeight, {\n              duration: 0,\n            })\n          );\n\n    const opacityValueAnimation = () =>\n      withTiming(state.value === CONTEXT_MENU_STATE.ACTIVE ? 1 : 0, {\n        duration: HOLD_ITEM_TRANSFORM_DURATION,\n      });\n\n    return {\n      top: topValueAnimation(),\n      opacity: opacityValueAnimation(),\n    };\n  });\n\n  const animatedContainerProps = useAnimatedProps(() => {\n    return {\n      intensity: withTiming(\n        state.value === CONTEXT_MENU_STATE.ACTIVE ? 100 : 0,\n        {\n          duration: HOLD_ITEM_TRANSFORM_DURATION,\n        }\n      ),\n    };\n  });\n\n  const animatedInnerContainerStyle = useAnimatedStyle(() => {\n    // if blur is disabled, change the android black background to the same as Ios\n    const backgroundColor =\n      theme.value === 'light'\n        ? disableBlur\n          ? BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR\n          : BACKDROP_LIGHT_BACKGROUND_COLOR\n        : disableBlur\n        ? BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR\n        : BACKDROP_DARK_BACKGROUND_COLOR;\n\n    return { backgroundColor };\n  }, [theme]);\n\n  return (\n    <TapGestureHandler onHandlerStateChange={tapGestureEvent}>\n      <AnimatedBlurView\n        // @ts-ignore\n        tint=\"default\"\n        animatedProps={animatedContainerProps}\n        style={[styles.container, animatedContainerStyle]}\n      >\n        <Animated.View\n          style={[\n            { ...StyleSheet.absoluteFillObject },\n            animatedInnerContainerStyle,\n          ]}\n        />\n      </AnimatedBlurView>\n    </TapGestureHandler>\n  );\n};\n\nconst Backdrop = memo(BackdropComponent);\n\nexport default Backdrop;\n"]}