{"version":3,"sources":["Provider.tsx"],"names":["React","memo","useEffect","useMemo","PortalProvider","Animated","useSharedValue","useAnimatedReaction","runOnJS","GestureHandlerRootView","Backdrop","InternalContext","CONTEXT_MENU_STATE","Menu","AnimatedIcon","ProviderComponent","children","theme","selectedTheme","iconComponent","safeAreaInsets","onOpen","onClose","disableBlur","isBlurDisabled","createAnimatedComponent","state","UNDETERMINED","menuProps","itemHeight","itemWidth","itemX","itemY","items","anchorPosition","menuHeight","transformValue","actionParams","value","ACTIVE","END","internalContextVariables","top","bottom","left","right","flex","Provider"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useMemo } from 'react';\nimport { PortalProvider } from '@gorhom/portal';\nimport Animated, {\n  useSharedValue,\n  useAnimatedReaction,\n  runOnJS,\n} from 'react-native-reanimated';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\n// Components\nimport { Backdrop } from '../backdrop';\n\n// Utils\nimport { InternalContext } from '../../context';\nimport { HoldMenuProviderProps } from './types';\nimport { StateProps, Action } from './reducer';\nimport { CONTEXT_MENU_STATE } from '../../constants';\nimport { MenuInternalProps } from '../menu/types';\nimport Menu from '../menu';\n\nexport interface Store {\n  state: StateProps;\n  dispatch?: React.Dispatch<Action>;\n}\n\nexport let AnimatedIcon: any;\n\nconst ProviderComponent = ({\n  children,\n  theme: selectedTheme,\n  iconComponent,\n  safeAreaInsets,\n  onOpen,\n  onClose,\n  disableBlur: isBlurDisabled = false,\n}: HoldMenuProviderProps) => {\n  if (iconComponent)\n    AnimatedIcon = Animated.createAnimatedComponent(iconComponent);\n\n  const state = useSharedValue<CONTEXT_MENU_STATE>(\n    CONTEXT_MENU_STATE.UNDETERMINED\n  );\n  const theme = useSharedValue<'light' | 'dark'>(selectedTheme || 'light');\n  const disableBlur = useSharedValue(isBlurDisabled);\n  const menuProps = useSharedValue<MenuInternalProps>({\n    itemHeight: 0,\n    itemWidth: 0,\n    itemX: 0,\n    itemY: 0,\n    items: [],\n    anchorPosition: 'top-center',\n    menuHeight: 0,\n    transformValue: 0,\n    actionParams: {},\n  });\n\n  useEffect(() => {\n    theme.value = selectedTheme || 'light';\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedTheme]);\n\n  useAnimatedReaction(\n    () => state.value,\n    state => {\n      switch (state) {\n        case CONTEXT_MENU_STATE.ACTIVE: {\n          if (onOpen) runOnJS(onOpen)();\n          break;\n        }\n        case CONTEXT_MENU_STATE.END: {\n          if (onClose) runOnJS(onClose)();\n          break;\n        }\n      }\n    },\n    [state]\n  );\n\n  const internalContextVariables = useMemo(\n    () => ({\n      state,\n      theme,\n      menuProps,\n      safeAreaInsets: safeAreaInsets || {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n      },\n      disableBlur,\n    }),\n    [state, theme, menuProps, safeAreaInsets, disableBlur]\n  );\n\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <InternalContext.Provider value={internalContextVariables}>\n        <PortalProvider>\n          {children}\n          <Backdrop />\n          <Menu />\n        </PortalProvider>\n      </InternalContext.Provider>\n    </GestureHandlerRootView>\n  );\n};\n\nconst Provider = memo(ProviderComponent);\n\nexport default Provider;\n"]}