{"version":3,"sources":["Backdrop.tsx"],"names":["React","memo","useMemo","StyleSheet","Animated","useAnimatedGestureHandler","useAnimatedProps","useAnimatedStyle","withDelay","withTiming","TapGestureHandler","BlurView","styles","CONTEXT_MENU_STATE","HOLD_ITEM_TRANSFORM_DURATION","IS_IOS","BACKDROP_LIGHT_BACKGROUND_COLOR","BACKDROP_DARK_BACKGROUND_COLOR","BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR","BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR","useDeviceOrientation","useInternal","BackdropComponent","state","theme","disableBlur","windowHeight","AnimatedBlurView","value","createAnimatedComponent","View","tapGestureEvent","onStart","event","context","console","log","x","y","startPosition","onCancel","END","onEnd","distance","Math","hypot","shouldClose","isStateActive","ACTIVE","animatedContainerStyle","topValueAnimation","duration","opacityValueAnimation","top","opacity","animatedContainerProps","intensity","animatedInnerContainerStyle","backgroundColor","container","absoluteFillObject","Backdrop"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,QAAP,IACEC,yBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,SAJF,EAKEC,UALF,QAMO,yBANP;AAOA,SACEC,iBADF,QAGO,8BAHP,C,CAKA;;AACA,SAASC,QAAT,QAAyB,WAAzB,C,CAEA;;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SACEC,kBADF,EAEEC,4BAFF,EAGEC,MAHF,QAIO,iBAJP;AAKA,SACEC,+BADF,EAEEC,8BAFF,EAGEC,uCAHF,EAIEC,sCAJF,QAKO,aALP;AAMA,SAASC,oBAAT,EAA+BC,WAA/B,QAAkD,aAAlD;;AASA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAAgCJ,WAAW,EAAjD;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAmBN,oBAAoB,EAA7C;AAEA,QAAMO,gBAAgB,GAAGzB,OAAO,CAC9B,MACE,CAAAuB,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEG,KAAb,MAAuB,KAAvB,IAAgCb,MAAhC,GACIX,QAAQ,CAACyB,uBAAT,CAAiClB,QAAjC,CADJ,GAEIP,QAAQ,CAAC0B,IAJe,EAK9B,CAACL,WAAD,CAL8B,CAAhC;AAQA,QAAMM,eAAe,GAAG1B,yBAAyB,CAI/C;AACE2B,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,QAAAA,CAAC,EAAEJ,KAAK,CAACI,CAAX;AAAcC,QAAAA,CAAC,EAAEL,KAAK,CAACK;AAAvB,OAAZ;AACAJ,MAAAA,OAAO,CAACK,aAAR,GAAwB;AAAEF,QAAAA,CAAC,EAAEJ,KAAK,CAACI,CAAX;AAAcC,QAAAA,CAAC,EAAEL,KAAK,CAACK;AAAvB,OAAxB;AACD,KAJH;AAKEE,IAAAA,QAAQ,EAAE,MAAM;AACdjB,MAAAA,KAAK,CAACK,KAAN,GAAcf,kBAAkB,CAAC4B,GAAjC;AACD,KAPH;AAQEC,IAAAA,KAAK,EAAE,CAACT,KAAD,EAAQC,OAAR,KAAoB;AACzB,YAAMS,QAAQ,GAAGC,IAAI,CAACC,KAAL,CACfZ,KAAK,CAACI,CAAN,GAAUH,OAAO,CAACK,aAAR,CAAsBF,CADjB,EAEfJ,KAAK,CAACK,CAAN,GAAUJ,OAAO,CAACK,aAAR,CAAsBD,CAFjB,CAAjB;AAIA,YAAMQ,WAAW,GAAGH,QAAQ,GAAG,EAA/B;AACA,YAAMI,aAAa,GAAGxB,KAAK,CAACK,KAAN,KAAgBf,kBAAkB,CAACmC,MAAzD;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEU,QAAAA,WAAF;AAAeC,QAAAA;AAAf,OAAZ;;AACA,UAAID,WAAW,IAAIC,aAAnB,EAAkC;AAChCxB,QAAAA,KAAK,CAACK,KAAN,GAAcf,kBAAkB,CAAC4B,GAAjC;AACD;AACF;AAnBH,GAJ+C,EAyB/C,CAAClB,KAAD,CAzB+C,CAAjD;AA4BA,QAAM0B,sBAAsB,GAAG1C,gBAAgB,CAAC,MAAM;AACpD,UAAM2C,iBAAiB,GAAG,MACxB3B,KAAK,CAACK,KAAN,KAAgBf,kBAAkB,CAACmC,MAAnC,GACI,CADJ,GAEIxC,SAAS,CACPM,4BADO,EAEPL,UAAU,CAACiB,YAAD,EAAe;AACvByB,MAAAA,QAAQ,EAAE;AADa,KAAf,CAFH,CAHf;;AAUA,UAAMC,qBAAqB,GAAG,MAC5B3C,UAAU,CAACc,KAAK,CAACK,KAAN,KAAgBf,kBAAkB,CAACmC,MAAnC,GAA4C,CAA5C,GAAgD,CAAjD,EAAoD;AAC5DG,MAAAA,QAAQ,EAAErC;AADkD,KAApD,CADZ;;AAKA,WAAO;AACLuC,MAAAA,GAAG,EAAEH,iBAAiB,EADjB;AAELI,MAAAA,OAAO,EAAEF,qBAAqB;AAFzB,KAAP;AAID,GApB8C,CAA/C;AAsBA,QAAMG,sBAAsB,GAAGjD,gBAAgB,CAAC,MAAM;AACpD,WAAO;AACLkD,MAAAA,SAAS,EAAE/C,UAAU,CACnBc,KAAK,CAACK,KAAN,KAAgBf,kBAAkB,CAACmC,MAAnC,GAA4C,GAA5C,GAAkD,CAD/B,EAEnB;AACEG,QAAAA,QAAQ,EAAErC;AADZ,OAFmB;AADhB,KAAP;AAQD,GAT8C,CAA/C;AAWA,QAAM2C,2BAA2B,GAAGlD,gBAAgB,CAAC,MAAM;AACzD;AACA,UAAMmD,eAAe,GACnBlC,KAAK,CAACI,KAAN,KAAgB,OAAhB,GACIH,WAAW,GACTP,uCADS,GAETF,+BAHN,GAIIS,WAAW,GACXN,sCADW,GAEXF,8BAPN;AASA,WAAO;AAAEyC,MAAAA;AAAF,KAAP;AACD,GAZmD,EAYjD,CAAClC,KAAD,CAZiD,CAApD;AAcA,sBACE,oBAAC,iBAAD;AAAmB,IAAA,oBAAoB,EAAEO;AAAzC,kBACE,oBAAC,gBAAD,CACE;AADF;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,aAAa,EAAEwB,sBAHjB;AAIE,IAAA,KAAK,EAAE,CACL3C,MAAM,CAAC+C,SADF,EAELV,sBAFK,EAGL;AAAES,MAAAA,eAAe,EAAE;AAAnB,KAHK;AAJT,kBAUE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL,EAAE,GAAGvD,UAAU,CAACyD;AAAhB,KADK,EAELH,2BAFK;AADT,IAVF,CADF,CADF;AAqBD,CA5GD;;AA8GA,MAAMI,QAAQ,gBAAG5D,IAAI,CAACqB,iBAAD,CAArB;AAEA,eAAeuC,QAAf","sourcesContent":["import React, { memo, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedGestureHandler,\n  useAnimatedProps,\n  useAnimatedStyle,\n  withDelay,\n  withTiming,\n} from 'react-native-reanimated';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\n\n// Components\nimport { BlurView } from 'expo-blur';\n\n// Utils\nimport { styles } from './styles';\nimport {\n  CONTEXT_MENU_STATE,\n  HOLD_ITEM_TRANSFORM_DURATION,\n  IS_IOS,\n} from '../../constants';\nimport {\n  BACKDROP_LIGHT_BACKGROUND_COLOR,\n  BACKDROP_DARK_BACKGROUND_COLOR,\n  BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR,\n  BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR,\n} from './constants';\nimport { useDeviceOrientation, useInternal } from '../../hooks';\n\ntype Context = {\n  startPosition: {\n    x: number;\n    y: number;\n  };\n};\n\nconst BackdropComponent = () => {\n  const { state, theme, disableBlur } = useInternal();\n  const { windowHeight } = useDeviceOrientation();\n\n  const AnimatedBlurView = useMemo(\n    () =>\n      disableBlur?.value === false && IS_IOS\n        ? Animated.createAnimatedComponent(BlurView)\n        : Animated.View,\n    [disableBlur]\n  );\n\n  const tapGestureEvent = useAnimatedGestureHandler<\n    TapGestureHandlerGestureEvent,\n    Context\n  >(\n    {\n      onStart: (event, context) => {\n        console.log({ x: event.x, y: event.y });\n        context.startPosition = { x: event.x, y: event.y };\n      },\n      onCancel: () => {\n        state.value = CONTEXT_MENU_STATE.END;\n      },\n      onEnd: (event, context) => {\n        const distance = Math.hypot(\n          event.x - context.startPosition.x,\n          event.y - context.startPosition.y\n        );\n        const shouldClose = distance < 10;\n        const isStateActive = state.value === CONTEXT_MENU_STATE.ACTIVE;\n        console.log({ shouldClose, isStateActive });\n        if (shouldClose && isStateActive) {\n          state.value = CONTEXT_MENU_STATE.END;\n        }\n      },\n    },\n    [state]\n  );\n\n  const animatedContainerStyle = useAnimatedStyle(() => {\n    const topValueAnimation = () =>\n      state.value === CONTEXT_MENU_STATE.ACTIVE\n        ? 0\n        : withDelay(\n            HOLD_ITEM_TRANSFORM_DURATION,\n            withTiming(windowHeight, {\n              duration: 0,\n            })\n          );\n\n    const opacityValueAnimation = () =>\n      withTiming(state.value === CONTEXT_MENU_STATE.ACTIVE ? 1 : 0, {\n        duration: HOLD_ITEM_TRANSFORM_DURATION,\n      });\n\n    return {\n      top: topValueAnimation(),\n      opacity: opacityValueAnimation(),\n    };\n  });\n\n  const animatedContainerProps = useAnimatedProps(() => {\n    return {\n      intensity: withTiming(\n        state.value === CONTEXT_MENU_STATE.ACTIVE ? 100 : 0,\n        {\n          duration: HOLD_ITEM_TRANSFORM_DURATION,\n        }\n      ),\n    };\n  });\n\n  const animatedInnerContainerStyle = useAnimatedStyle(() => {\n    // if blur is disabled, change the android black background to the same as Ios\n    const backgroundColor =\n      theme.value === 'light'\n        ? disableBlur\n          ? BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR\n          : BACKDROP_LIGHT_BACKGROUND_COLOR\n        : disableBlur\n        ? BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR\n        : BACKDROP_DARK_BACKGROUND_COLOR;\n\n    return { backgroundColor };\n  }, [theme]);\n\n  return (\n    <TapGestureHandler onHandlerStateChange={tapGestureEvent}>\n      <AnimatedBlurView\n        // @ts-ignore\n        tint=\"default\"\n        animatedProps={animatedContainerProps}\n        style={[\n          styles.container,\n          animatedContainerStyle,\n          { backgroundColor: 'red' },\n        ]}\n      >\n        <Animated.View\n          style={[\n            { ...StyleSheet.absoluteFillObject },\n            animatedInnerContainerStyle,\n          ]}\n        />\n      </AnimatedBlurView>\n    </TapGestureHandler>\n  );\n};\n\nconst Backdrop = memo(BackdropComponent);\n\nexport default Backdrop;\n"]}