{"version":3,"sources":["Backdrop.tsx"],"names":["React","memo","useMemo","StyleSheet","Animated","useAnimatedGestureHandler","useAnimatedProps","useAnimatedStyle","withDelay","withTiming","TapGestureHandler","BlurView","styles","CONTEXT_MENU_STATE","HOLD_ITEM_TRANSFORM_DURATION","IS_IOS","WINDOW_HEIGHT","BACKDROP_LIGHT_BACKGROUND_COLOR","BACKDROP_DARK_BACKGROUND_COLOR","BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR","BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR","useInternal","BackdropComponent","state","theme","disableBlur","AnimatedBlurView","value","createAnimatedComponent","View","tapGestureEvent","onStart","event","context","startPosition","x","y","onCancel","END","onEnd","distance","Math","hypot","shouldClose","isStateActive","ACTIVE","animatedContainerStyle","topValueAnimation","duration","opacityValueAnimation","top","opacity","animatedContainerProps","intensity","animatedInnerContainerStyle","backgroundColor","container","absoluteFillObject","Backdrop"],"mappings":"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","sourcesContent":["import React, { memo, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated, {\n  useAnimatedGestureHandler,\n  useAnimatedProps,\n  useAnimatedStyle,\n  withDelay,\n  withTiming,\n} from 'react-native-reanimated';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\n\n// Components\nimport { BlurView } from 'expo-blur';\n\n// Utils\nimport { styles } from './styles';\nimport {\n  CONTEXT_MENU_STATE,\n  HOLD_ITEM_TRANSFORM_DURATION,\n  IS_IOS,\n  WINDOW_HEIGHT,\n} from '../../constants';\nimport {\n  BACKDROP_LIGHT_BACKGROUND_COLOR,\n  BACKDROP_DARK_BACKGROUND_COLOR,\n  BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR,\n  BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR,\n} from './constants';\nimport { useInternal } from '../../hooks';\n\ntype Context = {\n  startPosition: {\n    x: number;\n    y: number;\n  };\n};\n\nconst BackdropComponent = () => {\n  const { state, theme, disableBlur } = useInternal();\n\n  const AnimatedBlurView = useMemo(\n    () =>\n      disableBlur?.value === false && IS_IOS\n        ? Animated.createAnimatedComponent(BlurView)\n        : Animated.View,\n    [disableBlur]\n  );\n\n  const tapGestureEvent = useAnimatedGestureHandler<\n    TapGestureHandlerGestureEvent,\n    Context\n  >(\n    {\n      onStart: (event, context) => {\n        context.startPosition = { x: event.x, y: event.y };\n      },\n      onCancel: () => {\n        state.value = CONTEXT_MENU_STATE.END;\n      },\n      onEnd: (event, context) => {\n        const distance = Math.hypot(\n          event.x - context.startPosition.x,\n          event.y - context.startPosition.y\n        );\n        const shouldClose = distance < 10;\n        const isStateActive = state.value === CONTEXT_MENU_STATE.ACTIVE;\n\n        if (shouldClose && isStateActive) {\n          state.value = CONTEXT_MENU_STATE.END;\n        }\n      },\n    },\n    [state]\n  );\n\n  const animatedContainerStyle = useAnimatedStyle(() => {\n    const topValueAnimation = () =>\n      state.value === CONTEXT_MENU_STATE.ACTIVE\n        ? 0\n        : withDelay(\n            HOLD_ITEM_TRANSFORM_DURATION,\n            withTiming(WINDOW_HEIGHT, {\n              duration: 0,\n            })\n          );\n\n    const opacityValueAnimation = () =>\n      withTiming(state.value === CONTEXT_MENU_STATE.ACTIVE ? 1 : 0, {\n        duration: HOLD_ITEM_TRANSFORM_DURATION,\n      });\n\n    return {\n      top: topValueAnimation(),\n      opacity: opacityValueAnimation(),\n    };\n  });\n\n  const animatedContainerProps = useAnimatedProps(() => {\n    return {\n      intensity: withTiming(\n        state.value === CONTEXT_MENU_STATE.ACTIVE ? 100 : 0,\n        {\n          duration: HOLD_ITEM_TRANSFORM_DURATION,\n        }\n      ),\n    };\n  });\n\n  const animatedInnerContainerStyle = useAnimatedStyle(() => {\n    // if blur is disabled, change the android black background to the same as Ios\n    const backgroundColor =\n      theme.value === 'light'\n        ? disableBlur\n          ? BACKDROP_NO_BLUR_LIGHT_BACKGROUND_COLOR\n          : BACKDROP_LIGHT_BACKGROUND_COLOR\n        : disableBlur\n        ? BACKDROP_NO_BLUR_DARK_BACKGROUND_COLOR\n        : BACKDROP_DARK_BACKGROUND_COLOR;\n\n    return { backgroundColor };\n  }, [theme]);\n\n  return (\n    <TapGestureHandler onHandlerStateChange={tapGestureEvent}>\n      <AnimatedBlurView\n        // @ts-ignore\n        tint=\"default\"\n        animatedProps={animatedContainerProps}\n        style={[styles.container, animatedContainerStyle]}\n      >\n        <Animated.View\n          style={[\n            { ...StyleSheet.absoluteFillObject },\n            animatedInnerContainerStyle,\n          ]}\n        />\n      </AnimatedBlurView>\n    </TapGestureHandler>\n  );\n};\n\nconst Backdrop = memo(BackdropComponent);\n\nexport default Backdrop;\n"]}